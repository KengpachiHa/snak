{"version":3,"sources":["base.js","canvas.js","snak.js","index.js"],"names":["way","left","right","up","down","initMap","width","height","snakWidth","mapArr","main","cross","i","push","j","snak","init","startPoint","length","arr","unshift","eatApple","head","apple","growHead","step","next","run","shift","turnTo","from","to","die","dead","eatHimself","creatApple","snakArr","mapLineArr","voidGround","deleteSnak","getMapArr","Math","floor","random","hadAte","inpurity","map","ground","key","forEach","ele","idx","hasOwnProperty","xArr","yArr","canvas","document","getElementById","screenWidth","window","screen","contro","style","display","ctx","getContext","mapLineColor","draw","lineColor","beginPath","strokeStyle","axis","line","moveTo","lineTo","stroke","snakColor","point","fillStyle","arc","PI","fill","clearAll","clearRect","mapWidth","mapHeight","snakDirection","haveTurnedDirection","gotApple","gap","minGap","interval","setInterval","clearInterval","showScoer","console","log","alert","clearScore","keyDown","code","newDirection","onkeydown","e","keyCode","addEventListener","id","target","num","score","innerHTML","start"],"mappings":"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","file":"snak.00352750.js","sourceRoot":"..","sourcesContent":["const way = { left: 'left', right: 'right', up: 'up', down: 'down'}\nconst initMap = (width, height, snakWidth) => {\n  const mapArr = []\n  const main = [], cross = []\n  for(let i = 1; i < height / snakWidth; i++) {\n    main.push([[0, 0 + i * snakWidth], [width, 0 + i * snakWidth]])\n  }\n  for(let j = 1; j < width / snakWidth; j++) {\n    cross.push([[0 + j * snakWidth, 0], [0 + j * snakWidth, width]])\n  }\n  mapArr.push(main)\n  mapArr.push(cross)\n  return mapArr\n}\nconst snak = {}\n\nsnak.init = (startPoint = [100, 100], length = 3, snakWidth = 20) => {\n  const arr = [startPoint]\n  for(let i = 1; i < length; i ++) {\n    arr.unshift([startPoint[0] - i * snakWidth, startPoint[1]])\n  }\n  return arr\n}\n\nsnak.eatApple = (head, apple) => head[0] == apple[0] && head[1] == apple[1]\nsnak.growHead = (arr, way, step) => {\n  let next = []\n  const head = arr[arr.length - 1]\n  switch (way) {\n    case 'up':\n      next = [head[0], head[1] - step]\n      break;\n    case 'down':\n      next = [head[0], head[1] + step]\n      break;\n    case 'left':\n      next = [head[0] - step, head[1]]\n      break;\n    case 'right':\n      next = [head[0] + step, head[1]]\n      break;\n  }\n  arr.push(next)\n  return arr\n}\nsnak.run = (arr, way, step) => {\n  snak.growHead(arr, way, step)\n  arr.shift()\n  return arr\n}\n\nsnak.turnTo = (from, to) => {\n  if((from == way.left && to == way.right) || (from == way.right && to == way.left)) to = from\n  if((from == way.up && to == way.down)    || (from == way.down && to == way.up))    to = from\n  return to\n}\n\nsnak.die = (head, arr, width = 600, height = 600) => {\n  let dead  = false\n  // hit wall\n  if(head[0] < 0     ||\n     head[0] > width || \n     head[1] < 0     ||\n     head[1] > height)\n    dead = true\n  // hit snakself => sm?\n  if(eatHimself(head, arr)) dead = true\n  if(dead) arr.length = 0\n  return dead\n}\n\nconst creatApple = (snakArr, mapLineArr) => {\n  const voidGround = deleteSnak(snakArr, getMapArr(mapLineArr))\n  let random = Math.floor(Math.random() * voidGround.length)\n  return voidGround[random]\n}\n\nfunction eatHimself (head, arr) {\n  let hadAte = false\n  for (let i = 0; i < arr.length - 1; i++) {\n    if(head[0] == arr[i][0] && head[1] == arr[i][1]) {\n      hadAte = true\n      arr.length = 0\n      break\n    }\n  }\n  return hadAte\n}\n\nfunction deleteSnak (inpurity, arr) {\n  let map = {}, snak = {}\n  const ground = []\n  arr.forEach((ele, idx) => {\n    map[ele[0] + '_' + ele[1]] = ele\n  })\n  inpurity.forEach((ele, idx) => {\n    snak[ele[0] + '_' + ele[1]] = ele\n  })\n  for (const key in snak) {\n    if (map.hasOwnProperty(key)) {\n      delete map[key]\n    }\n  }\n  for (const key in map) {\n    ground.push(map[key])\n  }\n  return ground\n}\n\nfunction getMapArr(arr) {\n  const mapArr = []\n  const main = arr[0]\n  const cross = arr[1]\n  const xArr = cross.map(ele => ele[0][0])\n  const yArr = main.map(ele => ele[0][1])\n  for (let i = 0; i < xArr.length; i++) {\n    for (let j = 0; j < yArr.length; j++) {\n      mapArr.push([xArr[i], yArr[j]])\n    }\n  }\n  return mapArr\n}\n\nexport {\n  initMap, snak, way, creatApple\n}","\nconst canvas = document.getElementById('super_snak_81594')\n\nconst screenWidth = window.screen.width\nif(screenWidth < 600) {\n  canvas.width = screenWidth\n  canvas.height = screenWidth\n  const contro = document.getElementById('contro')\n  contro.style.display = 'block'\n}\n\nconst ctx    = canvas.getContext('2d')\nconst mapLineColor = '#621454'\nconst draw = {}\ndraw.map = (arr, lineColor = mapLineColor) => {\n  ctx.beginPath()\n  ctx.strokeStyle = lineColor\n  arr.forEach(axis => {\n    axis.forEach(line => {\n      ctx.moveTo(...line[0])\n      ctx.lineTo(...line[1])\n    })\n  });\n  ctx.stroke()\n}\ndraw.snak = (arr, snakColor = 'yellow') => {\n  arr.forEach(point => {\n    ctx.beginPath()\n    ctx.fillStyle = snakColor\n    ctx.arc(point[0], point[1], 10, 0, 2 * Math.PI)\n    ctx.fill()\n  });\n}\ndraw.apple = (point) => {\n  ctx.beginPath()\n  ctx.fillStyle = '#cf5757'\n  ctx.arc(point[0], point[1], 10, 0, 2 * Math.PI)\n  ctx.fill()\n}\ndraw.clearAll = () => ctx.clearRect(0, 0, canvas.width, canvas.height);\n\nexport {\n  canvas, ctx,\n  draw,\n}","import { initMap, creatApple, snak, way } from './base'\nimport{ canvas, draw } from './canvas'\n\nconst mapWidth  = canvas.width\nconst mapHeight = canvas.height\nconst snakWidth = 20\nconst mapLineArr = initMap(mapWidth, mapHeight, snakWidth)\n\nlet snakDirection = way.right\nlet haveTurnedDirection = false\nlet snakArr = []\nlet apple = []\nlet gotApple = 0\n\ndraw.map(mapLineArr)\nsnakArr = snak.init()\napple = creatApple(snakArr, mapLineArr)\ndraw.snak(snakArr)\ndraw.apple(apple)\n\nlet gap = 600\nconst minGap = 100\n\nlet interval = setInterval(main, gap);\n\nfunction main () {\n  haveTurnedDirection = false\n  draw.clearAll()\n  draw.map(mapLineArr)\n  draw.apple(apple)\n  let head = snakArr[snakArr.length - 1]\n  if(snak.eatApple(head, apple)) {\n    if(gap > minGap) {\n      gap -= 50\n      clearInterval(interval)\n      interval = setInterval(main, gap);\n    }\n    /**\n     * 这里借鉴了经典的诺基亚版贪吃蛇，动画效果是 \n     * 蛇头到了苹果 下一次运动直接运动两个单位，蛇尾缩小一个单位，\n     这样来实现。\n     */\n    snakArr = snak.growHead(snakArr, snakDirection, snakWidth)\n    snakArr = snak.run(snakArr, snakDirection, snakWidth)\n    draw.clearAll()\n    draw.map(mapLineArr)\n    apple = creatApple(snakArr, mapLineArr)\n    draw.apple(apple)\n    showScoer(gotApple += 1)\n  } else {\n    snakArr = snak.run(snakArr, snakDirection, snakWidth)\n  }\n  head = snakArr[snakArr.length - 1]\n  if(!snak.die(head, snakArr, mapWidth, mapHeight)) {\n    draw.snak(snakArr)\n  } else {\n    console.log( `game's over` )\n    alert(`game's over`)\n    alert(`菜的抠脚， 老子上次吃了${gotApple + 2}个苹果呢～，继续努力-_-#`)\n    console.log('after over snakArr', snakArr)\n    clearInterval(interval)\n    clearScore()\n    snakArr.length = 0\n    snakArr = snak.init()\n    snakDirection = way.right\n    haveTurnedDirection = false\n    draw.snak(snakArr)\n    gap = 600\n    // interval = setInterval(main, gap);\n  }\n}\n\ndocument.onkeydown = (e) => keyDown(e.keyCode)\n\ndocument.getElementById('contro')\ncontro.addEventListener('click', (e) => {\n  const id = e.target.id\n  if(id == way.up) keyDown(38)\n  if(id == way.down) keyDown(40)\n  if(id == way.left) keyDown(37)\n  if(id == way.right) keyDown(39)\n})\n\nfunction keyDown (code) {\n  let newDirection = null\n  if(code == 87 || code == 38) newDirection = snak.turnTo(snakDirection, way.up)\n  if(code == 83 || code == 40) newDirection = snak.turnTo(snakDirection, way.down)\n  if(code == 65 || code == 37) newDirection = snak.turnTo(snakDirection, way.left)\n  if(code == 68 || code == 39) newDirection = snak.turnTo(snakDirection, way.right)\n\n  if(snakDirection != newDirection && !haveTurnedDirection) {\n    snakDirection = newDirection\n    haveTurnedDirection = true\n  }\n}\nconst num = document.getElementById('num')\nfunction showScoer (score) {\n  num.innerHTML = score\n}\nfunction clearScore () {\n  num.innerHTML = 0\n}\n\nconst start = document.getElementById('start')\nstart.addEventListener('click', (e) => {\n  console.log(snakArr)\n  interval = setInterval(main, gap)\n})\n","import {} from './snak'\n\n// snakRun()"]}